# -*- coding: utf-8 -*-
"""Ejercicio_2_BB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C04Yf5gMjhSbYzG_wdEItRGzCce5GjqG
"""

"cargar los datos"
from google.colab import files
uploaded = files.upload()

"importar librería de panda para hacer la tabla"
import pandas as pd
import io
Big_bang = pd.read_csv(io.BytesIO(uploaded["big_bang_theory_dataset.csv"]))
Big_bang.head(2)

"Comparativa de las veces que dice Sheldon la palabra Penny"
Big_bang.loc[(Big_bang.Speaker == "Sheldon")&(Big_bang["Text"].str.contains("Penny"))]

"Comparativa de las veces que dice Sheldon concretamente Penny."
Big_bang.loc[(Big_bang.Speaker == "Sheldon")&(Big_bang.Text == "Penny.")]

"histograma de las veces que Sheldon dice Penny"
import numpy as np
import pandas as pd
from scipy import stats, integrate
import matplotlib.pyplot as plt
import seaborn as sns

fig, axs = plt.subplots(2, 1, figsize=(15,6))

sns.histplot(data = Big_bang.loc[(Big_bang.Speaker == "Sheldon") & (Big_bang.Text.str.contains("Penny",case=False))],x = "Location", ax = axs[0],color = "green")

sns.histplot(data = Big_bang.loc[(Big_bang.Speaker == "Sheldon") & (Big_bang.Text == "Penny.")], x = "Location", ax=axs[1], color = "orange")

lines = []
labels =[]
axLine = 0
axLabel = 0

for ax in fig.axes:

  axLine, axLabel = ax.get_legend_handles_labels()
  lines.extend(axLine)
  labels.extend(axLabel)

fig.legend(lines, labels, loc = "upper right")

plt.show()

"Gráfica de las veces que Sheldon dice Penny"
import seaborn as sns
sns.set_theme(style="whitegrid")

Muestra = Big_bang

cmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)

Graph_1 = sns.relplot(data = Muestra,x="Location", y="Speaker", sizes=(10, 200))

"Buscar las veces que dice Penny y crear columnas para contarlo"

import pandas as pd
import numpy as np
Big_bang["Say_Penny"] = Big_bang["Text"].str.match("Penny")
Big_bang["Contar_Say_Penny"] = np.where(Big_bang["Say_Penny"]==True,"1","0")
Big_bang.head(5)

"Cuantas veces se dice la palabra Penny"
Big_bang.Say_Penny.value_counts()

"Crear dataFrame nuevo para contar por season e indice las veces que se dice Penny "
Big_bang_2 = Big_bang.groupby(["Season","Speaker"]).Contar_Say_Penny.agg(["sum"]).reset_index()
Big_bang_2["Indice"] = Big_bang_2.groupby(["Speaker"]).ngroup()
Big_bang_2["Veces_Penny"] = Big_bang_2["sum"]
Big_bang_2 = Big_bang_2[["Season","Speaker","Veces_Penny","Indice"]] 
Big_bang_2.head(5)

"En esta parte me ayudó un compañero, pero la verdad es que no me queda muy claro porqué esta haciendo todo esto"
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

x_train, x_test, y_train, y_test = train_test_split(Big_bang_2.Indice, Big_bang_2.Veces_Penny, test_size = 0.20, random_state=0)

logisticRegr = LogisticRegression()

logisticRegr.fit(x_train.values.reshape(-1,1), y_train)

predictions = logisticRegr.predict(x_test.values.reshape(-1,1))

score = logisticRegr.score(x_test.values.reshape(-1,1), y_test)
print (score)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics

cm = metrics.confusion_matrix(y_test, predictions)
print (cm)